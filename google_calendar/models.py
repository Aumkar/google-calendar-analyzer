from django.contrib.auth.models import User
from django.db import models

from google_calendar import ATTENDEE_RESPONSES


class Event(models.Model):
    """
    Stores events for an user's primary calendar
    """
    event_id = models.CharField(
        max_length=256,
        blank=False,
        help_text='Id of the event generated by google calendar'
    )
    user = models.ForeignKey(
        User,
        related_name='events',
        on_delete=models.PROTECT,
        help_text='User to which event belongs'
    )
    summary = models.CharField(
        max_length=256,
        help_text='Title of the event',
        blank=False
    )
    description = models.TextField(blank=True, help_text='Event description')
    location = models.TextField(blank=True, help_text='Location of the event')

    is_creator = models.BooleanField(
        help_text='Whether user has created the event'
    )

    # If `is_creator` is True then below field will be blank
    creator_email = models.EmailField(
        blank=True,
        help_text='Email id of the person who has created'
    )

    is_attendee = models.BooleanField(
        help_text='True when user is present in attendees and has accepted '
                  'the invitation, False otherwise'
    )

    # Timestamp fields
    start_datetime = models.DateTimeField(
        help_text='Datetime when event starts'
    )
    end_datetime = models.DateTimeField(
        help_text='Datetime when event ends'
    )
    created_at = models.DateTimeField(
        help_text='Datetime when event is created on google calendar'
    )

    class Meta:
        unique_together = ('user', 'event_id')

    def __str__(self):
        return '{}-{}'.format(self.pk, self.summary)


class Attendee(models.Model):
    """
    Stores attendees information for an event. This model stores attendees other
    than user whom event belongs to.
    """
    event = models.ForeignKey(
        Event,
        related_name='attendees',
        on_delete=models.CASCADE,
        help_text='Event associated with the attendee'
    )
    email = models.EmailField(help_text='Email of the attendee')
    response = models.CharField(
        max_length=16,
        choices=ATTENDEE_RESPONSES,
        help_text='Response from the attendee'
    )

    class Meta:
        unique_together = ('event', 'email')

    def __str__(self):
        return '{}-{}()'.format(self.pk, self.email, self.response)


class UserMetaData(models.Model):
    """
    Stores meta data for an user which is specific to google calendar API

    """
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name='cal_meta_data',
        help_text='User for which meta data is stored',
    )

    # Oauth credentials for an user
    access_token = models.CharField(
        max_length=256,
        blank=False,
        help_text='Token used to access the content'
    )
    refresh_token = models.CharField(
        max_length=256,
        blank=False,
        help_text='Token used for refreshing token when access token is expired'
    )

    next_sync_token = models.CharField(
        max_length=32,
        blank=True,
        help_text='This token is used to pull delta events from calendar API'
    )

    time_zone = models.CharField(
        max_length=64,
        blank=True,
        help_text='Timezone of the user'
    )